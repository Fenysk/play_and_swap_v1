generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String  @id @unique
    email          String  @unique
    hashedPassword String  @map("hashed_password")
    refreshToken   String? @map("hashed_rt")
    roles          Role[]

    firstName   String? @map("first_name")
    lastName    String? @map("last_name")
    userName    String? @map("user_name")
    phoneNumber String? @map("phone_number")

    confirmationId String? @map("confirmation_id")
    confirmed      Boolean @default(false)
    activeCartId   String? @unique @map("active_cart_id")

    defaultCustomerAddressId String? @unique @map("default_customer_address_id")
    defaultSellerAddressId   String? @unique @map("default_seller_address_id")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    Addresses Address[]
    Items     Item[]
    Carts     Cart[]
    Order     Order[]
}

model Address {
    id              String   @id @unique
    numberAndStreet String   @map("number_and_street")
    city            String
    zipCode         String   @map("zip_code")
    state           String
    country         Country  @default(FR)
    createdAt       DateTime @default(now()) @map("created_at")
    updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

    userId String @map("user_id")
    User   User   @relation(fields: [userId], references: [id])

    Order Order[]

    @@map("addresses")
}

model Item {
    id          String   @id @unique
    name        String
    description String
    state       String
    price       Decimal
    images      String[]

    isVisible Boolean @default(true) @map("is_visible")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    userId String @map("user_id")
    User   User?  @relation(fields: [userId], references: [id])

    CartItem CartItem[]

    @@map("items")
}

model Cart {
    id String @id @unique

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    userId String? @map("user_id")
    User   User?   @relation(fields: [userId], references: [id])

    CartItem CartItem[]
    Order    Order?

    @@map("carts")
}

model CartItem {
    id String @id @unique

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    cartId String @map("cart_id")
    Cart   Cart?  @relation(fields: [cartId], references: [id])

    itemId String @map("item_id")
    Item   Item?  @relation(fields: [itemId], references: [id])

    @@unique([cartId, itemId])
    @@map("cart_items")
}

model Order {
    id          String      @id @unique
    cartAmount  Int
    taxAmount   Int         @default(0) @map("tax_amount")
    totalAmount Int         @map("total_amount")
    currency    Currency    @default(EUR)
    status      OrderStatus @default(PENDING)

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    userId String @map("user_id")
    User   User   @relation(fields: [userId], references: [id])

    cartId String @unique @map("cart_id")
    Cart   Cart   @relation(fields: [cartId], references: [id])

    addressId String  @map("address_id")
    Address   Address @relation(fields: [addressId], references: [id])

    Payment  Payment?
    Shipping Shipping?

    @@unique([userId, cartId])
    @@map("orders")
}

model Payment {
    id String @id @unique

    sessionId  String?       @map("session_id")
    sessionUrl String?       @map("session_url")
    status     PaymentStatus @default(INITIATED)

    currency    Currency @default(EUR)
    amountTotal Int      @map("amount_total")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    orderId String @unique @map("order_id")
    Order   Order  @relation(fields: [orderId], references: [id])

    @@map("payments")
}

model Shipping {
    id String @id @unique

    carrierName  String         @map("carrier_name")
    instructions String?
    status       ShippingStatus @default(INITIATED)

    relayId          String  @map("relay_id")
    expeditionNumber String? @map("expedition_number")
    stickerUrl       String? @map("sticker_url")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

    orderId String @unique @map("order_id")
    Order   Order  @relation(fields: [orderId], references: [id])
}

enum Role {
    USER
    ADMIN
    SELLER
}

enum Country {
    FR
}

enum Currency {
    EUR
}

enum OrderStatus {
    PENDING
    FINISHED
    CANCELLED
}

enum PaymentStatus {
    INITIATED
    OPEN
    COMPLETE
    EXPIRED
}

enum ShippingStatus {
    INITIATED
    IN_SHIPMENT
    SHIPPED
    DELIVERED
    RETRIEVED
    CANCELLED
}
